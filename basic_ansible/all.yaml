---
- hosts: all            # Run this against all Hosts in the ansible inventory file
  become: yes           # Becomes the Root user during execution on the remote device
  remote_user: cumulus  # Specifying the Remote User used for SSH
  gather_facts: no      # Don't query the remote node for any identifying information before running tasks
  vars:
    ansible_user: "cumulus"
    ansible_ssh_pass: "CumulusLinux!"
    ansible_become_pass: "CumulusLinux!"
  tasks:                # All of these tasks are executed on the remote device
    - name: GENERATE SSH KEY
      shell: ls /home/vagrant/.ssh/id_rsa || /usr/bin/ssh-keygen -b 2048 -t rsa -f /home/vagrant/.ssh/id_rsa -q -N ""
      become: no
      delegate_to: localhost
      ignore_errors: yes

    - name: Make a ".ssh" Directory for the Cumulus user
      file: path=/home/cumulus/.ssh state=directory mode=0755

    - name: Copy our Authorized Key to the Cumulus user
      copy: src=/home/vagrant/.ssh/id_rsa.pub dest=/home/cumulus/.ssh/authorized_keys

    - name: Make a ".ssh" Directory for the Root user
      file: path=/root/.ssh state=directory mode=0755

    - name: Copy our Authorized Key to the Root user
      copy: src=/home/vagrant/.ssh/id_rsa.pub dest=/root/.ssh/authorized_keys


- hosts: all
  remote_user: cumulus
  gather_facts: no
  become: yes
  become_method: sudo
  tasks:
    - name: Configure Syslog
      template: src=./files/90-remotesyslog.conf.j2 dest=/etc/rsyslog.d/90-remotesyslog.conf

    - name: Restart Syslog Service
      service: name=rsyslog state=restarted


- hosts: all
  remote_user: cumulus
  gather_facts: no
  become: yes
  tasks:
    - name: Write the Hostname to File
      shell: echo "{{ inventory_hostname }}" > /etc/hostname

    - name: Apply Hostname
      shell: hostname -F /etc/hostname

    - name: Add Local DNS Resolution for our Hostname
      lineinfile: dest=/etc/hosts line="127.0.1.1    {{inventory_hostname}}" regexp=^.*127.0.1.1


- hosts: leaf:spine
  remote_user: cumulus
  gather_facts: no
  become: yes
  become_method: sudo
  vars:
    - license: "email@address.com|THISisAfakeLICENSE"
  tasks:
    - name: Apply the License
      shell: echo "{{ license }}" | cl-license -i 

    - name: Restart Switchd
      service: name=switchd state=restarted


- hosts: all
  remote_user: cumulus
  gather_facts: no
  become: yes
  become_method: sudo
  tasks:
    - name: Configure MOTD
      copy: src=./files/motd dest=/etc/motd

    - name: Configure Login Warning Message (Banner)
      copy: src=./files/banner dest=/etc/issue.net

    - name: Enable Usage of Banner by SSH
      lineinfile: dest=/etc/ssh/sshd_config line="Banner /etc/issue.net" regexp=^.*Banner

    - name: Restart SSH Daemon
      service: name=ssh state=restarted


- hosts: all
  remote_user: cumulus
  gather_facts: no
  become: yes
  become_method: sudo
  tasks:
    - name: Install NTP
      apt: name=ntp update_cache=yes

    - name: Write Timezone File
      # Choose a Timezone from the list here --> https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
      lineinfile: dest=/etc/timezone line="America/New York"

    - name: Apply Timezone
      shell: /usr/sbin/dpkg-reconfigure --frontend noninteractive tzdata

    - name: Generate and Push NTP Config File
      template: src=./files/ntp.conf.j2 dest=/etc/ntp.conf

    - name: Restart NTP Service           
      service: name=ntp state=restarted


- hosts: all
  remote_user: cumulus
  gather_facts: no
  become: yes
  become_method: sudo
  tasks:
    - name: Configure Syslog
      template: src=./files/90-remotesyslog.conf.j2 dest=/etc/rsyslog.d/90-remotesyslog.conf
      
    - name: Restart Syslog Service
      service: name=rsyslog state=restarted


- hosts: leaf:spine
  remote_user: cumulus
  become: yes
  become_method: sudo
  tasks:
    # This task configures /etc/network/interfaces on ifupdown2. The variables for
    # which interfaces are neighbors and networks come from the group_vars/all file.
    - name: Generate Interface Configuration
      template: src=./files/switch_interfaces.j2 dest=/etc/network/interfaces

    # This handler reloads ifupdown2, which comes standard on cumulus switches.
    # ifupdown2 is much smarter than its predecessor and as such reloading is painless.
    # Note that the -a means "auto" - this command only reloads interfaces that are
    # marked with the auto keyword.
    - name: Reload the Networking Configuration
      command: ifreload -a

    # This step ensures that the quagga daemon is running.
    - name: Ensure Quagga is Started
      service: name=quagga state=started

    # The quagga daemons file is a static file that specifies which subdaemons
    # are actually running (zebra, bgpd, ospf). This file is not required when
    # Quagga is being run using systemd.
    - name: Enable Individual Routing Protocol Daemons
      copy: src=./files/daemons dest=/etc/quagga/daemons

    # This writes configuration to the Quagga configuration file using the
    # information in group_vars/all. 
    - name: Generate Quagga Configuration
      template: src=./files/Quagga.conf.j2 dest=/etc/quagga/Quagga.conf

    # This command checks quagga before restarting it, just in case there are syntax
    # errors. The dryrun command will have output if there are problems, so this
    # short shell scripts fails and stops ansible if there is any output.
    - name: Check Quagga.conf File for Syntax
      shell: bash -c '[[ -z $(vtysh -f /etc/quagga/Quagga.conf --dryrun) ]]'

    # This command actually restarts quagga. This command will actually drop all
    # routes currently in progress, so this will interrupt networking currently in
    # place.
    - name: Restart Quagga Service
      service: name=quagga state=restarted

- hosts: server
  remote_user: cumulus
  become: yes
  become_method: sudo
  tasks:
    # This configures legacy ifupdown interfaces and sets the default internal route to point
    # to the leafs. If the configuration changes, ifupdown will be reloaded.
    - name: configure /etc/network/interfaces on the host (using legacy ifupdown)
      template: src=./files/server_interfaces.j2 dest=/etc/network/interfaces

    # This command attempts to reload legacy ifupdown. However, when making substantial
    # changes to the networking stack such as changing routes, etc, sometimes this
    # command fails and the only solution is to reboot the server.
    - name: reload networking legacy
      shell: ifdown --force -a && ifup --force -a

